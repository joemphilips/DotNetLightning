name: Publish to Nuget
on:
  push:
    branches:
      - master
      - cd # just for now.
      - 'nightly*' # to workaround regular publishing process
    tags:
      - 'v*.*.*'

jobs:
  check_nuget_secret:
    runs-on: ubuntu-20.04
    outputs:
      nuget-api-key: ${{ steps.nuget-api-key.outputs.defined }}
    steps:
    - id: nuget-api-key
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      if: "${{ env.NUGET_API_KEY != '' }}"
      run: echo "::set-output name=defined::true"

  create_release_from_tag:
    needs: [check_nuget_secret]
    if: |
      needs.check_nuget_secret.outputs.nuget-api-key == 'true'
        && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      # workaround for upload-release-asset does not support variable expansion.
      # see: https://github.com/actions/upload-release-asset/issues/17
      - name: get version
        id: get_version
        # the substitution we use here does not work in windows.
        run: |
          echo ${GITHUB_REF/refs\/tags\/v/}
          echo ${GITHUB_REF/refs\/tags\/v/} > version.txt
          echo "::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}"
      - name: Create release
        id: create_release_from_tag
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Release v${{ steps.get_version.outputs.VERSION }}
          draft: false
      - run: |
          echo '${{ steps.create_release_from_tag.outputs.upload_url }}' > release_upload_url.txt
      - uses: actions/upload-artifact@v1
        with:
          name: create-release
          path: release_upload_url.txt
      - uses: actions/upload-artifact@v1
        with:
          name: get_version
          path: version.txt

  pack_and_push_tag:
    needs: create_release_from_tag
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
        dotnet: ['6.0.x']
        include:
          - os: ubuntu-20.04
            RID: linux
          - os: macos-latest
            RID: osx
    steps:
      - uses: actions/checkout@v2
      - name: Setup ${{ matrix.dotnet }} .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}
          
      # get and set release url and version
      - uses: actions/download-artifact@v1
        with:
          name: create-release
      - uses: actions/download-artifact@v1
        with:
          name: get_version
      - id: upload-url
        run: |
          echo "::set-output name=url::$(cat create-release/release_upload_url.txt)"
      - id: get_version
        run: |
          echo "::set-output name=VERSION::$(cat get_version/version.txt)"

      - name: pack and push to nuget (BouncyCastle)
        # we want to run only once.
        if: startsWith(matrix.os, 'ubuntu-20')
        run: |
          echo "releasing BouncyCastle version to nuget..."
          dotnet pack -p:Configuration=Release src/DotNetLightning.Core -p:BouncyCastle=True
          if [ ${{ secrets.NUGET_API_KEY }} ]; then
            dotnet nuget push ./src/DotNetLightning.Core/bin/Release/DotNetLightning.${{ steps.get_version.outputs.VERSION }}.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
          fi

      - name: upload release asset (BouncyCastle version)
        # we want to run only once.
        if: startsWith(matrix.os, 'ubuntu-20')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload-url.outputs.url }}
          asset_path: ./src/DotNetLightning.Core/bin/Release/DotNetLightning.${{ steps.get_version.outputs.VERSION }}.nupkg
          asset_name: DotNetLightning-multiplatform.${{ steps.get_version.outputs.VERSION }}.nupkg
          asset_content_type: application/zip

      - name: pack non-BouncyCastle version
        run: |
          dotnet pack -p:Configuration=Release src/DotNetLightning.Core

      - name: upload release asset (non-BouncyCastle version)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload-url.outputs.url }}
          asset_path: ./src/DotNetLightning.Core/bin/Release/DotNetLightning.Core.${{ steps.get_version.outputs.VERSION }}.nupkg
          asset_name: DotNetLightning-${{ matrix.RID }}.${{ steps.get_version.outputs.VERSION }}.nupkg
          asset_content_type: application/zip

  pack_and_push_prerelease:
    needs: [check_nuget_secret]
    if: |
      needs.check_nuget_secret.outputs.nuget-api-key == 'true'
        && !startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
        dotnet: ['6.0.x']
        include:
          - os: ubuntu-20.04
            RID: linux
          - os: macos-latest
            RID: osx
          - os: windows-latest
            RID: windows
      fail-fast: true
    steps:

    - uses: actions/checkout@v2

    - name: Setup ${{ matrix.dotnet }} .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet }}

    - name: Upload nuget packages (Portability)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        dotnet pack ./src/DotNetLightning.Core -p:Configuration=Release --version-suffix date`date +%Y%m%d-%H%M`-git-`echo $GITHUB_SHA | head -c 7` -p:Portability=True
        dotnet nuget push ./src/DotNetLightning.Core/bin/Release/DotNetLightning.1*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json

    - name: Upload nuget packages (native)
      run: |
        bash -c "dotnet pack ./src/DotNetLightning.Core -p:Configuration=Release --version-suffix date$(date +%Y%m%d-%H%M).git-$(git rev-parse --short=7 HEAD)-${{ matrix.RID }}"
        bash -c "dotnet nuget push ./src/DotNetLightning.Core/bin/Release/DotNetLightning.Core.1*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json"

    - name: Upload nuget packages (DotNetLightning.ClnRpc)
      run: |
        dotnet pack src/DotNetLightning.ClnRpc -p:Configuration=Release --version-suffix date`date +%Y%m%d-%H%M`-git-`echo $GITHUB_SHA | head -c 7` -p:Portability=True
        dotnet nuget push ./src/DotNetLightning.ClnRpc/bin/Release/DotNetLightning.ClnRpc.*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json

