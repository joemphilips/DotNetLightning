
/// This file was automatically generated using following command:
/// ```bash
/// msggen
/// ```
///
/// Do not edit this file, it'll be overwritten. Rather edit the schema that
/// This file was generated from
namespace DotNetLightning.ClnRpc

open System
open System.Text.Json
open System.Text.Json.Serialization

open NBitcoin
open NBitcoin.Scripting
open DotNetLightning.Utils

type ChannelState =
    | OPENINGD = 0
    | CHANNELD_AWAITING_LOCKIN = 1
    | CHANNELD_NORMAL = 2
    | CHANNELD_SHUTTING_DOWN = 3
    | CLOSINGD_SIGEXCHANGE = 4
    | CLOSINGD_COMPLETE = 5
    | AWAITING_UNILATERAL = 6
    | FUNDING_SPEND_SEEN = 7
    | ONCHAIN = 8
    | DUALOPEND_OPEN_INIT = 9
    | DUALOPEND_AWAITING_LOCKIN = 10

type ChannelStateChangeCause =
    | [<System.Runtime.Serialization.EnumMember(Value = "unknown")>] UNKNOWN = 0
    | [<System.Runtime.Serialization.EnumMember(Value = "local")>] LOCAL = 1
    | [<System.Runtime.Serialization.EnumMember(Value = "user")>] USER = 2
    | [<System.Runtime.Serialization.EnumMember(Value = "remote")>] REMOTE = 3
    | [<System.Runtime.Serialization.EnumMember(Value = "protocol")>] PROTOCOL = 4
    | [<System.Runtime.Serialization.EnumMember(Value = "onchain")>] ONCHAIN = 5

type [<Measure>] msat

type AmountOrAny =
    | Amount of int64<msat>
    | Any

type AmountOrAll =
    | Amount of int64<msat>
    | All

type Feerate =
    | Slow
    | Normal
    | Urgent
    | PerKb of uint32
    | PerKw of uint32

    with
    override this.ToString() =
        match this with
        | Slow -> "slow"
        | Normal -> "normal"
        | Urgent -> "urgent"
        | PerKb v -> $"{v} perkb"
        | PerKw v -> $"{v} perkw"

type ChannelSide =
    | [<System.Runtime.Serialization.EnumMember(Value = "local")>] LOCAL = 0
    | [<System.Runtime.Serialization.EnumMember(Value = "remote")>] REMOTE = 1

open System.Runtime.CompilerServices

[<AutoOpen>]
module private PrimitiveExtensions =
    let parseClnAmount(s: string): int64<msat> =
        if s |> String.IsNullOrWhiteSpace then
            raise <| FormatException($"Invalid string for money. null")
        else if s.EndsWith("msat") then
            s.Substring(0, s.Length - 4) |> int64 |> unbox
        else if s.EndsWith("sat") then
            s.Substring(0, s.Length - 3) |> int64 |> unbox
        else if s.EndsWith("btc") then
            s.Substring(0, s.Length - 3) |> int64 |> unbox
        else
            raise <| FormatException $"Invalid string for money {s}"


[<AutoOpen>]
module private ClnRpcJsonConverters =
  type MSatJsonConverter() =
      inherit JsonConverter<int64<msat>>()
      override this.Write(writer, value, options) =
          writer.WriteStringValue(value.ToString() + "msat")
      override this.Read(reader, _typeToConvert, _options) =
          reader.GetString()
          |> parseClnAmount

  type PubKeyJsonConverter() =
      inherit JsonConverter<PubKey>()

      override this.Write(writer, value, _options) =
          value.ToString()
          |> writer.WriteStringValue
      override this.Read(reader, _typeToConvert, _options) =
          let b = reader.GetString() |> Convert.FromHexString
          if b.Length <> 33 then
            raise <| JsonException($"Invalid length for pubkey: {b.Length}, it must be 33")
          else
            b |> PubKey

  type ShortChannelIdJsonConverter() =
    inherit JsonConverter<ShortChannelId>()
    override this.Write(writer, value, _options) =
      value.ToString()
      |> writer.WriteStringValue
    override this.Read(reader, _typeToConvert, _options) =
      let s = reader.GetString()
      match ShortChannelId.TryParse s |> ResultUtils.Result.ToFSharpCoreResult with
      | Ok c -> c
      | Error e ->
        raise <| JsonException e

  type KeyJsonConverter() =
    inherit JsonConverter<Key>()

    override this.Write(writer, value, _options) =
      value.ToString()
      |> writer.WriteStringValue

    override this.Read(reader, _typeToConvert, _options) =
      let b = reader.GetString() |> Convert.FromHexString
      new Key(b)

  type uint256JsonConverter() =
    inherit JsonConverter<uint256>()
    override this.Write(writer, value, _options) =
      value.ToString()
      |> writer.WriteStringValue

    override this.Read(reader, _typeToConvert, _options) =
      reader.GetString()
      |> Convert.FromHexString
      |> uint256

  type AmountOrAnyJsonConverter() =
      inherit JsonConverter<AmountOrAny>()

      override this.Write(writer, value, options) =
          match value with
          | AmountOrAny.Any ->
              writer.WriteStringValue "any"
          | AmountOrAny.Amount a ->
              writer.WriteStringValue(a.ToString() + "msat")
      override this.Read(reader, _typeToConvert, _options) =
          match reader.GetString() with
          | "any" ->
              AmountOrAny.Any
          | x ->
              parseClnAmount x
              |> AmountOrAny.Amount

  type AmountOrAllJsonConverter() =
      inherit JsonConverter<AmountOrAll>()

      override this.Write(writer, value, options) =
          match value with
          | AmountOrAll.All ->
              writer.WriteStringValue "all"
          | AmountOrAll.Amount a ->
              writer.WriteStringValue(a.ToString() + "msat")
      override this.Read(reader, _typeToConvert, _options) =
          match reader.GetString() with
          | "all" ->
              AmountOrAll.All
          | x ->
              parseClnAmount x
              |> AmountOrAll.Amount

  type OutPointJsonConverter() =
      inherit JsonConverter<OutPoint>()

      override this.Write(writer, value, options) =
        writer.WriteStringValue(value.ToString())

      override this.Read(reader, _typeToConvert, _options) =
          let splits = reader.GetString().Split ":"
          if splits.Length <> 2 then
              raise <| JsonException("not a valid txid:output tuple")
          else
            let o = OutPoint()
            o.Hash <-
              splits.[0] |> uint256.Parse
            o.N <- splits.[1] |> uint32
            o

  type FeerateJsonConverter() =
      inherit JsonConverter<Feerate>()

      override this.Write(writer, value, options) =
          value.ToString() |> writer.WriteStringValue

      override this.Read(reader, _typeToConvert, _options) =
          let s = reader.GetString()
          let number =
              s
              |> Seq.choose(fun c -> match UInt32.TryParse($"{c}") with | true, v -> Some v | _ -> None)
              |> Seq.fold(fun acc d -> acc * 10u + d) 0u

          let s = s.ToLowerInvariant()
          if s.EndsWith "perkw" then
              Feerate.PerKw(number)
          else if s.EndsWith "perkb" then
              Feerate.PerKb number
          else if s = "slow" then
              Feerate.Slow
          else if s = "normal" then
              Feerate.Normal
          else if s = "urgent" then
              Feerate.Urgent
          else
              raise <| JsonException $"Unable to parse feerate from string {s}"

  type OutputDescriptorJsonConverter(network: Network) =
      inherit JsonConverter<OutputDescriptor>()

      override this.Write(writer, value, options) =
          value.ToString() |> writer.WriteStringValue

      override this.Read(reader, _typeToConvert, _options) =
          reader.GetString()
          |> fun s -> OutputDescriptor.Parse(s, network)

type RouteHop = {
    [<JsonPropertyName "id">]
    [<JsonConverter(typeof<PubKeyJsonConverter>)>]
    Id: PubKey

    [<JsonPropertyName "scid">]
    [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
    Scid: ShortChannelId

    [<JsonPropertyName "feebase">]
    [<JsonConverter(typeof<MSatJsonConverter>)>]
    Feebase: int64<msat>

    [<JsonPropertyName "feeprop">]
    Feeprop: uint32

    [<JsonPropertyName "expirydelta">]
    Expirydelta: uint16
}

type Routehint = {
    [<JsonPropertyName "hops">]
    Hops: RouteHop[]
}

type RoutehintList = {
    [<JsonPropertyName "hints">]
    Hints: Routehint []
}

[<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
module Requests =
    type GetinfoRequest = unit

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpeersRequest = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("id")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Id: PubKey option
        [<JsonPropertyName("level")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Level: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListfundsRequest = {
        [<JsonPropertyName("spent")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Spent: bool option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SendpayRoute = {
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("msatoshi")>]
        Msatoshi: int64<msat>
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("id")>]
        Id: PubKey
        [<JsonPropertyName("delay")>]
        Delay: uint16
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("channel")>]
        Channel: ShortChannelId
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SendpayRequest = {
        [<JsonPropertyName("route")>]
        Route: SendpayRoute []
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        [<JsonPropertyName("label")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Label: string option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("msatoshi")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Msatoshi: int64<msat> option
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_secret")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentSecret: Key option
        [<JsonPropertyName("partid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Partid: uint16 option
        [<JsonPropertyName("localofferid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Localofferid: string option
        [<JsonPropertyName("groupid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Groupid: uint64 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListchannelsRequest = {
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("short_channel_id")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ShortChannelId: ShortChannelId option
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("source")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Source: PubKey option
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("destination")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Destination: PubKey option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type AddgossipRequest = {
        [<JsonPropertyName("message")>]
        Message: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type AutocleaninvoiceRequest = {
        [<JsonPropertyName("expired_by")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ExpiredBy: uint64 option
        [<JsonPropertyName("cycle_seconds")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        CycleSeconds: uint64 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type CheckmessageRequest = {
        [<JsonPropertyName("message")>]
        Message: string
        [<JsonPropertyName("zbase")>]
        Zbase: string
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("pubkey")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Pubkey: PubKey option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type CloseRequest = {
        [<JsonPropertyName("id")>]
        Id: string
        [<JsonPropertyName("unilateraltimeout")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Unilateraltimeout: uint32 option
        [<JsonPropertyName("destination")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Destination: string option
        [<JsonPropertyName("fee_negotiation_step")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        FeeNegotiationStep: string option
        [<JsonPropertyName("wrong_funding")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        WrongFunding: string option
        [<JsonPropertyName("force_lease_closed")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ForceLeaseClosed: bool option
        [<JsonPropertyName("feerange")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Feerange: Feerate [] option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ConnectRequest = {
        [<JsonPropertyName("id")>]
        Id: string
        [<JsonPropertyName("host")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Host: string option
        [<JsonPropertyName("port")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Port: uint16 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type CreateinvoiceRequest = {
        [<JsonPropertyName("invstring")>]
        Invstring: string
        [<JsonPropertyName("label")>]
        Label: string
        [<JsonPropertyName("preimage")>]
        Preimage: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type DatastoreMode =
        | [<System.Runtime.Serialization.EnumMember(Value = "must-create")>] MUST_CREATE = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "must-replace")>] MUST_REPLACE = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "create-or-replace")>] CREATE_OR_REPLACE = 2
        | [<System.Runtime.Serialization.EnumMember(Value = "must-append")>] MUST_APPEND = 3
        | [<System.Runtime.Serialization.EnumMember(Value = "create-or-append")>] CREATE_OR_APPEND = 4


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type DatastoreRequest = {
        [<JsonPropertyName("key")>]
        Key: string []
        [<JsonPropertyName("string")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        String: string option
        [<JsonPropertyName("hex")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Hex: string option
        [<JsonPropertyName("mode")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Mode: DatastoreMode option
        [<JsonPropertyName("generation")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Generation: uint64 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type CreateonionHops = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("pubkey")>]
        Pubkey: PubKey
        [<JsonPropertyName("payload")>]
        Payload: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type CreateonionRequest = {
        [<JsonPropertyName("hops")>]
        Hops: CreateonionHops []
        [<JsonPropertyName("assocdata")>]
        Assocdata: string
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("session_key")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        SessionKey: Key option
        [<JsonPropertyName("onion_size")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        OnionSize: uint16 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type DeldatastoreRequest = {
        [<JsonPropertyName("key")>]
        Key: string []
        [<JsonPropertyName("generation")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Generation: uint64 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type DelexpiredinvoiceRequest = {
        [<JsonPropertyName("maxexpirytime")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Maxexpirytime: uint64 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type DelinvoiceStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "paid")>] PAID = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "expired")>] EXPIRED = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "unpaid")>] UNPAID = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type DelinvoiceRequest = {
        [<JsonPropertyName("label")>]
        Label: string
        // Path `DelInvoice.status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: DelinvoiceStatus
        [<JsonPropertyName("desconly")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Desconly: bool option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type InvoiceRequest = {
        [<JsonConverter(typeof<AmountOrAnyJsonConverter>)>]
        [<JsonPropertyName("msatoshi")>]
        Msatoshi: AmountOrAny
        [<JsonPropertyName("description")>]
        Description: string
        [<JsonPropertyName("label")>]
        Label: string
        [<JsonPropertyName("expiry")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Expiry: uint64 option
        [<JsonPropertyName("fallbacks")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Fallbacks: string [] option
        [<JsonPropertyName("preimage")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Preimage: string option
        [<JsonPropertyName("exposeprivatechannels")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Exposeprivatechannels: bool option
        [<JsonPropertyName("cltv")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Cltv: uint32 option
        [<JsonPropertyName("deschashonly")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Deschashonly: bool option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListdatastoreRequest = {
        [<JsonPropertyName("key")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Key: string [] option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListinvoicesRequest = {
        [<JsonPropertyName("label")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Label: string option
        [<JsonPropertyName("invstring")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Invstring: string option
        [<JsonPropertyName("payment_hash")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentHash: string option
        [<JsonPropertyName("offer_id")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        OfferId: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SendonionFirst_hop = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("id")>]
        Id: PubKey
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        AmountMsat: int64<msat>
        [<JsonPropertyName("delay")>]
        Delay: uint16
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SendonionRequest = {
        [<JsonPropertyName("onion")>]
        Onion: string
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        [<JsonPropertyName("label")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Label: string option
        [<JsonPropertyName("shared_secrets")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        SharedSecrets: Key [] option
        [<JsonPropertyName("partid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Partid: uint16 option
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("msatoshi")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Msatoshi: int64<msat> option
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("destination")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Destination: PubKey option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("localofferid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Localofferid: uint256 option
        [<JsonPropertyName("groupid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Groupid: uint64 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListsendpaysStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "pending")>] PENDING = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "complete")>] COMPLETE = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "failed")>] FAILED = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListsendpaysRequest = {
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentHash: uint256 option
        [<JsonPropertyName("status")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Status: ListsendpaysStatus option
    }

    type ListtransactionsRequest = unit

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type PayRequest = {
        [<JsonPropertyName("bolt11")>]
        Bolt11: string
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("msatoshi")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Msatoshi: int64<msat> option
        [<JsonPropertyName("label")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Label: string option
        [<JsonPropertyName("riskfactor")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Riskfactor: int64 option
        [<JsonPropertyName("maxfeepercent")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Maxfeepercent: int64 option
        [<JsonPropertyName("retry_for")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        RetryFor: uint16 option
        [<JsonPropertyName("maxdelay")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Maxdelay: uint16 option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("exemptfee")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Exemptfee: int64<msat> option
        [<JsonPropertyName("localofferid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Localofferid: string option
        [<JsonPropertyName("exclude")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Exclude: string [] option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("maxfee")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Maxfee: int64<msat> option
        [<JsonPropertyName("description")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Description: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListnodesRequest = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("id")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Id: PubKey option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type WaitanyinvoiceRequest = {
        [<JsonPropertyName("lastpay_index")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        LastpayIndex: uint64 option
        [<JsonPropertyName("timeout")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Timeout: uint64 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type WaitinvoiceRequest = {
        [<JsonPropertyName("label")>]
        Label: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type WaitsendpayRequest = {
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        [<JsonPropertyName("timeout")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Timeout: uint32 option
        [<JsonPropertyName("partid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Partid: uint64 option
        [<JsonPropertyName("groupid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Groupid: uint64 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type NewaddrAddresstype =
        | [<System.Runtime.Serialization.EnumMember(Value = "bech32")>] BECH32 = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "p2sh-segwit")>] P2SH_SEGWIT = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "all")>] ALL = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type NewaddrRequest = {
        [<JsonPropertyName("addresstype")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Addresstype: NewaddrAddresstype option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type WithdrawRequest = {
        [<JsonPropertyName("destination")>]
        Destination: string
        [<JsonConverter(typeof<AmountOrAllJsonConverter>)>]
        [<JsonPropertyName("satoshi")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Satoshi: AmountOrAll option
        [<JsonConverter(typeof<FeerateJsonConverter>)>]
        [<JsonPropertyName("feerate")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Feerate: Feerate option
        [<JsonPropertyName("minconf")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Minconf: uint16 option
        [<JsonPropertyName("utxos")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Utxos: OutPoint [] option
    }

    type KeysendExtratlvs = unit

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type KeysendRequest = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("destination")>]
        Destination: PubKey
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("msatoshi")>]
        Msatoshi: int64<msat>
        [<JsonPropertyName("label")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Label: string option
        [<JsonPropertyName("maxfeepercent")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Maxfeepercent: int64 option
        [<JsonPropertyName("retry_for")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        RetryFor: uint32 option
        [<JsonPropertyName("maxdelay")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Maxdelay: uint32 option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("exemptfee")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Exemptfee: int64<msat> option
        [<JsonPropertyName("routehints")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Routehints: RoutehintList option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type FundpsbtRequest = {
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("satoshi")>]
        Satoshi: int64<msat>
        [<JsonConverter(typeof<FeerateJsonConverter>)>]
        [<JsonPropertyName("feerate")>]
        Feerate: Feerate
        [<JsonPropertyName("startweight")>]
        Startweight: uint32
        [<JsonPropertyName("minconf")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Minconf: uint32 option
        [<JsonPropertyName("reserve")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Reserve: uint32 option
        [<JsonPropertyName("locktime")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Locktime: uint32 option
        [<JsonPropertyName("min_witness_weight")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        MinWitnessWeight: uint32 option
        [<JsonPropertyName("excess_as_change")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ExcessAsChange: bool option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SendpsbtRequest = {
        [<JsonPropertyName("psbt")>]
        Psbt: string
        [<JsonPropertyName("reserve")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Reserve: bool option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SignpsbtRequest = {
        [<JsonPropertyName("psbt")>]
        Psbt: string
        [<JsonPropertyName("signonly")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Signonly: uint32 [] option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type UtxopsbtRequest = {
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("satoshi")>]
        Satoshi: int64<msat>
        [<JsonConverter(typeof<FeerateJsonConverter>)>]
        [<JsonPropertyName("feerate")>]
        Feerate: Feerate
        [<JsonPropertyName("startweight")>]
        Startweight: uint32
        [<JsonPropertyName("utxos")>]
        Utxos: OutPoint []
        [<JsonPropertyName("reserve")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Reserve: uint32 option
        [<JsonPropertyName("reservedok")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Reservedok: bool option
        [<JsonPropertyName("locktime")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Locktime: uint32 option
        [<JsonPropertyName("min_witness_weight")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        MinWitnessWeight: uint32 option
        [<JsonPropertyName("excess_as_change")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ExcessAsChange: bool option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type TxdiscardRequest = {
        [<JsonPropertyName("txid")>]
        Txid: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type TxprepareRequest = {
        [<JsonPropertyName("outputs")>]
        Outputs: OutputDescriptor []
        [<JsonConverter(typeof<FeerateJsonConverter>)>]
        [<JsonPropertyName("feerate")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Feerate: Feerate option
        [<JsonPropertyName("minconf")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Minconf: uint32 option
        [<JsonPropertyName("utxos")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Utxos: OutPoint [] option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type TxsendRequest = {
        [<JsonPropertyName("txid")>]
        Txid: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type DisconnectRequest = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("id")>]
        Id: PubKey
        [<JsonPropertyName("force")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Force: bool option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type FeeratesStyle =
        | [<System.Runtime.Serialization.EnumMember(Value = "perkb")>] PERKB = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "perkw")>] PERKW = 1


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type FeeratesRequest = {
        // Path `Feerates.style`
        [<JsonPropertyName("style")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Style: FeeratesStyle
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type GetrouteRequest = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("id")>]
        Id: PubKey
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("msatoshi")>]
        Msatoshi: int64<msat>
        [<JsonPropertyName("riskfactor")>]
        Riskfactor: uint64
        [<JsonPropertyName("cltv")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Cltv: int64 option
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("fromid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Fromid: PubKey option
        [<JsonPropertyName("fuzzpercent")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Fuzzpercent: uint32 option
        [<JsonPropertyName("exclude")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Exclude: string [] option
        [<JsonPropertyName("maxhops")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Maxhops: uint32 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListforwardsStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "offered")>] OFFERED = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "settled")>] SETTLED = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "local_failed")>] LOCAL_FAILED = 2
        | [<System.Runtime.Serialization.EnumMember(Value = "failed")>] FAILED = 3


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListforwardsRequest = {
        [<JsonPropertyName("status")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Status: ListforwardsStatus option
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("in_channel")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        InChannel: ShortChannelId option
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("out_channel")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        OutChannel: ShortChannelId option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListpaysStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "pending")>] PENDING = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "complete")>] COMPLETE = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "failed")>] FAILED = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpaysRequest = {
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentHash: uint256 option
        [<JsonPropertyName("status")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Status: ListpaysStatus option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type PingRequest = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("id")>]
        Id: PubKey
        [<JsonPropertyName("len")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Len: int64 option
        [<JsonPropertyName("pongbytes")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Pongbytes: int64 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SignmessageRequest = {
        [<JsonPropertyName("message")>]
        Message: string
    }



[<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
module Responses =
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type GetinfoOur_features = {
        [<JsonPropertyName("init")>]
        Init: string
        [<JsonPropertyName("node")>]
        Node: string
        [<JsonPropertyName("channel")>]
        Channel: string
        [<JsonPropertyName("invoice")>]
        Invoice: string
    }

    /// Type of connection
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type GetinfoAddressType =
        | [<System.Runtime.Serialization.EnumMember(Value = "dns")>] DNS = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "ipv4")>] IPV4 = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "ipv6")>] IPV6 = 2
        | [<System.Runtime.Serialization.EnumMember(Value = "torv2")>] TORV2 = 3
        | [<System.Runtime.Serialization.EnumMember(Value = "torv3")>] TORV3 = 4
        | [<System.Runtime.Serialization.EnumMember(Value = "websocket")>] WEBSOCKET = 5


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type GetinfoAddress = {
        // Path `Getinfo.address[].type`
        [<JsonPropertyName("type")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        ItemType: GetinfoAddressType
        [<JsonPropertyName("port")>]
        Port: uint16
        [<JsonPropertyName("address")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Address: string option
    }

    /// Type of connection
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type GetinfoBindingType =
        | [<System.Runtime.Serialization.EnumMember(Value = "local socket")>] LOCAL_SOCKET = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "ipv4")>] IPV4 = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "ipv6")>] IPV6 = 2
        | [<System.Runtime.Serialization.EnumMember(Value = "torv2")>] TORV2 = 3
        | [<System.Runtime.Serialization.EnumMember(Value = "torv3")>] TORV3 = 4


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type GetinfoBinding = {
        // Path `Getinfo.binding[].type`
        [<JsonPropertyName("type")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        ItemType: GetinfoBindingType
        [<JsonPropertyName("address")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Address: string option
        [<JsonPropertyName("port")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Port: uint16 option
        [<JsonPropertyName("socket")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Socket: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type GetinfoResponse = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("id")>]
        Id: PubKey
        [<JsonPropertyName("alias")>]
        Alias: string
        [<JsonPropertyName("color")>]
        Color: string
        [<JsonPropertyName("num_peers")>]
        NumPeers: uint32
        [<JsonPropertyName("num_pending_channels")>]
        NumPendingChannels: uint32
        [<JsonPropertyName("num_active_channels")>]
        NumActiveChannels: uint32
        [<JsonPropertyName("num_inactive_channels")>]
        NumInactiveChannels: uint32
        [<JsonPropertyName("version")>]
        Version: string
        [<JsonPropertyName("lightning-dir")>]
        LightningDir: string
        [<JsonPropertyName("blockheight")>]
        Blockheight: uint32
        [<JsonPropertyName("network")>]
        Network: string
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("fees_collected_msat")>]
        FeesCollectedMsat: int64<msat>
        [<JsonPropertyName("address")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Address: GetinfoAddress [] option
        [<JsonPropertyName("binding")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Binding: GetinfoBinding [] option
        [<JsonPropertyName("warning_bitcoind_sync")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        WarningBitcoindSync: string option
        [<JsonPropertyName("warning_lightningd_sync")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        WarningLightningdSync: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListpeersPeersLogType =
        | [<System.Runtime.Serialization.EnumMember(Value = "SKIPPED")>] SKIPPED = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "BROKEN")>] BROKEN = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "UNUSUAL")>] UNUSUAL = 2
        | [<System.Runtime.Serialization.EnumMember(Value = "INFO")>] INFO = 3
        | [<System.Runtime.Serialization.EnumMember(Value = "DEBUG")>] DEBUG = 4
        | [<System.Runtime.Serialization.EnumMember(Value = "IO_IN")>] IO_IN = 5
        | [<System.Runtime.Serialization.EnumMember(Value = "IO_OUT")>] IO_OUT = 6


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpeersPeersLog = {
        // Path `ListPeers.peers[].log[].type`
        [<JsonPropertyName("type")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        ItemType: ListpeersPeersLogType
        [<JsonPropertyName("num_skipped")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        NumSkipped: uint32 option
        [<JsonPropertyName("time")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Time: string option
        [<JsonPropertyName("source")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Source: string option
        [<JsonPropertyName("log")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Log: string option
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("node_id")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        NodeId: PubKey option
        [<JsonPropertyName("data")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Data: string option
    }

    /// the channel state, in particular "CHANNELD_NORMAL" means the channel can be used normally
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListpeersPeersChannelsState =
        | [<System.Runtime.Serialization.EnumMember(Value = "OPENINGD")>] OPENINGD = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "CHANNELD_AWAITING_LOCKIN")>] CHANNELD_AWAITING_LOCKIN = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "CHANNELD_NORMAL")>] CHANNELD_NORMAL = 2
        | [<System.Runtime.Serialization.EnumMember(Value = "CHANNELD_SHUTTING_DOWN")>] CHANNELD_SHUTTING_DOWN = 3
        | [<System.Runtime.Serialization.EnumMember(Value = "CLOSINGD_SIGEXCHANGE")>] CLOSINGD_SIGEXCHANGE = 4
        | [<System.Runtime.Serialization.EnumMember(Value = "CLOSINGD_COMPLETE")>] CLOSINGD_COMPLETE = 5
        | [<System.Runtime.Serialization.EnumMember(Value = "AWAITING_UNILATERAL")>] AWAITING_UNILATERAL = 6
        | [<System.Runtime.Serialization.EnumMember(Value = "FUNDING_SPEND_SEEN")>] FUNDING_SPEND_SEEN = 7
        | [<System.Runtime.Serialization.EnumMember(Value = "ONCHAIN")>] ONCHAIN = 8
        | [<System.Runtime.Serialization.EnumMember(Value = "DUALOPEND_OPEN_INIT")>] DUALOPEND_OPEN_INIT = 9
        | [<System.Runtime.Serialization.EnumMember(Value = "DUALOPEND_AWAITING_LOCKIN")>] DUALOPEND_AWAITING_LOCKIN = 10


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpeersPeersChannelsFeerate = {
        [<JsonPropertyName("perkw")>]
        Perkw: uint32
        [<JsonPropertyName("perkb")>]
        Perkb: uint32
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpeersPeersChannelsInflight = {
        [<JsonPropertyName("funding_txid")>]
        FundingTxid: string
        [<JsonPropertyName("funding_outnum")>]
        FundingOutnum: uint32
        [<JsonPropertyName("feerate")>]
        Feerate: string
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("total_funding_msat")>]
        TotalFundingMsat: int64<msat>
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("our_funding_msat")>]
        OurFundingMsat: int64<msat>
        [<JsonPropertyName("scratch_txid")>]
        ScratchTxid: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpeersPeersChannelsFunding = {
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("local_msat")>]
        LocalMsat: int64<msat>
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("remote_msat")>]
        RemoteMsat: int64<msat>
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("pushed_msat")>]
        PushedMsat: int64<msat>
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpeersPeersChannelsState_changes = {
        [<JsonPropertyName("timestamp")>]
        Timestamp: string
        // Path `ListPeers.peers[].channels[].state_changes[].old_state`
        [<JsonPropertyName("old_state")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        OldState: ChannelState
        // Path `ListPeers.peers[].channels[].state_changes[].new_state`
        [<JsonPropertyName("new_state")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        NewState: ChannelState
        // Path `ListPeers.peers[].channels[].state_changes[].cause`
        [<JsonPropertyName("cause")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Cause: ChannelStateChangeCause
        [<JsonPropertyName("message")>]
        Message: string
    }

    /// Whether it came from peer, or is going to peer
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListpeersPeersChannelsHtlcsDirection =
        | [<System.Runtime.Serialization.EnumMember(Value = "in")>] IN = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "out")>] OUT = 1


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpeersPeersChannelsHtlcs = {
        // Path `ListPeers.peers[].channels[].htlcs[].direction`
        [<JsonPropertyName("direction")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Direction: ListpeersPeersChannelsHtlcsDirection
        [<JsonPropertyName("id")>]
        Id: uint64
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        AmountMsat: int64<msat>
        [<JsonPropertyName("expiry")>]
        Expiry: uint32
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        [<JsonPropertyName("local_trimmed")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        LocalTrimmed: bool option
        [<JsonPropertyName("status")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Status: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpeersPeersChannels = {
        // Path `ListPeers.peers[].channels[].state`
        [<JsonPropertyName("state")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        State: ListpeersPeersChannelsState
        [<JsonPropertyName("scratch_txid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ScratchTxid: string option
        [<JsonPropertyName("owner")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Owner: string option
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("short_channel_id")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ShortChannelId: ShortChannelId option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("channel_id")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ChannelId: uint256 option
        [<JsonPropertyName("funding_txid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        FundingTxid: string option
        [<JsonPropertyName("funding_outnum")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        FundingOutnum: uint32 option
        [<JsonPropertyName("initial_feerate")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        InitialFeerate: string option
        [<JsonPropertyName("last_feerate")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        LastFeerate: string option
        [<JsonPropertyName("next_feerate")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        NextFeerate: string option
        [<JsonPropertyName("next_fee_step")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        NextFeeStep: uint32 option
        [<JsonPropertyName("inflight")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Inflight: ListpeersPeersChannelsInflight [] option
        [<JsonPropertyName("close_to")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        CloseTo: string option
        [<JsonPropertyName("private")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Private: bool option
        // Path `ListPeers.peers[].channels[].opener`
        [<JsonPropertyName("opener")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Opener: ChannelSide
        [<JsonPropertyName("features")>]
        Features: string []
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("to_us_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ToUsMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("min_to_us_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        MinToUsMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("max_to_us_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        MaxToUsMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("total_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        TotalMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("fee_base_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        FeeBaseMsat: int64<msat> option
        [<JsonPropertyName("fee_proportional_millionths")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        FeeProportionalMillionths: uint32 option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("dust_limit_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        DustLimitMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("max_total_htlc_in_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        MaxTotalHtlcInMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("their_reserve_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        TheirReserveMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("our_reserve_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        OurReserveMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("spendable_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        SpendableMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("receivable_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ReceivableMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("minimum_htlc_in_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        MinimumHtlcInMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("minimum_htlc_out_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        MinimumHtlcOutMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("maximum_htlc_out_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        MaximumHtlcOutMsat: int64<msat> option
        [<JsonPropertyName("their_to_self_delay")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        TheirToSelfDelay: uint32 option
        [<JsonPropertyName("our_to_self_delay")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        OurToSelfDelay: uint32 option
        [<JsonPropertyName("max_accepted_htlcs")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        MaxAcceptedHtlcs: uint32 option
        [<JsonPropertyName("state_changes")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        StateChanges: ListpeersPeersChannelsState_changes [] option
        [<JsonPropertyName("status")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Status: string [] option
        [<JsonPropertyName("in_payments_offered")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        InPaymentsOffered: uint64 option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("in_offered_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        InOfferedMsat: int64<msat> option
        [<JsonPropertyName("in_payments_fulfilled")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        InPaymentsFulfilled: uint64 option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("in_fulfilled_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        InFulfilledMsat: int64<msat> option
        [<JsonPropertyName("out_payments_offered")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        OutPaymentsOffered: uint64 option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("out_offered_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        OutOfferedMsat: int64<msat> option
        [<JsonPropertyName("out_payments_fulfilled")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        OutPaymentsFulfilled: uint64 option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("out_fulfilled_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        OutFulfilledMsat: int64<msat> option
        [<JsonPropertyName("htlcs")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Htlcs: ListpeersPeersChannelsHtlcs [] option
        [<JsonPropertyName("close_to_addr")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        CloseToAddr: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpeersPeers = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("id")>]
        Id: PubKey
        [<JsonPropertyName("connected")>]
        Connected: bool
        [<JsonPropertyName("log")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Log: ListpeersPeersLog [] option
        [<JsonPropertyName("channels")>]
        Channels: ListpeersPeersChannels []
        [<JsonPropertyName("netaddr")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Netaddr: string [] option
        [<JsonPropertyName("features")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Features: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpeersResponse = {
        [<JsonPropertyName("peers")>]
        Peers: ListpeersPeers []
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListfundsOutputsStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "unconfirmed")>] UNCONFIRMED = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "confirmed")>] CONFIRMED = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "spent")>] SPENT = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListfundsOutputs = {
        [<JsonPropertyName("txid")>]
        Txid: string
        [<JsonPropertyName("output")>]
        Output: uint32
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        AmountMsat: int64<msat>
        [<JsonPropertyName("scriptpubkey")>]
        Scriptpubkey: string
        [<JsonPropertyName("address")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Address: string option
        [<JsonPropertyName("redeemscript")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Redeemscript: string option
        // Path `ListFunds.outputs[].status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: ListfundsOutputsStatus
        [<JsonPropertyName("blockheight")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Blockheight: uint32 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListfundsChannels = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("peer_id")>]
        PeerId: PubKey
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("our_amount_msat")>]
        OurAmountMsat: int64<msat>
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        AmountMsat: int64<msat>
        [<JsonPropertyName("funding_txid")>]
        FundingTxid: string
        [<JsonPropertyName("funding_output")>]
        FundingOutput: uint32
        [<JsonPropertyName("connected")>]
        Connected: bool
        // Path `ListFunds.channels[].state`
        [<JsonPropertyName("state")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        State: ChannelState
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("short_channel_id")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ShortChannelId: ShortChannelId option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListfundsResponse = {
        [<JsonPropertyName("outputs")>]
        Outputs: ListfundsOutputs []
        [<JsonPropertyName("channels")>]
        Channels: ListfundsChannels []
    }

    /// status of the payment (could be complete if already sent previously)
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type SendpayStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "pending")>] PENDING = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "complete")>] COMPLETE = 1


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SendpayResponse = {
        [<JsonPropertyName("id")>]
        Id: uint64
        [<JsonPropertyName("groupid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Groupid: uint64 option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        // Path `SendPay.status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: SendpayStatus
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountMsat: int64<msat> option
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("destination")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Destination: PubKey option
        [<JsonPropertyName("created_at")>]
        CreatedAt: uint64
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_sent_msat")>]
        AmountSentMsat: int64<msat>
        [<JsonPropertyName("label")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Label: string option
        [<JsonPropertyName("partid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Partid: uint64 option
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonPropertyName("bolt12")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt12: string option
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_preimage")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentPreimage: Key option
        [<JsonPropertyName("message")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Message: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListchannelsChannels = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("source")>]
        Source: PubKey
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("destination")>]
        Destination: PubKey
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("short_channel_id")>]
        ShortChannelId: ShortChannelId
        [<JsonPropertyName("public")>]
        Public: bool
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        AmountMsat: int64<msat>
        [<JsonPropertyName("message_flags")>]
        MessageFlags: byte
        [<JsonPropertyName("channel_flags")>]
        ChannelFlags: byte
        [<JsonPropertyName("active")>]
        Active: bool
        [<JsonPropertyName("last_update")>]
        LastUpdate: uint32
        [<JsonPropertyName("base_fee_millisatoshi")>]
        BaseFeeMillisatoshi: uint32
        [<JsonPropertyName("fee_per_millionth")>]
        FeePerMillionth: uint32
        [<JsonPropertyName("delay")>]
        Delay: uint32
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("htlc_minimum_msat")>]
        HtlcMinimumMsat: int64<msat>
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("htlc_maximum_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        HtlcMaximumMsat: int64<msat> option
        [<JsonPropertyName("features")>]
        Features: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListchannelsResponse = {
        [<JsonPropertyName("channels")>]
        Channels: ListchannelsChannels []
    }

    type AddgossipResponse = unit

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type AutocleaninvoiceResponse = {
        [<JsonPropertyName("enabled")>]
        Enabled: bool
        [<JsonPropertyName("expired_by")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ExpiredBy: uint64 option
        [<JsonPropertyName("cycle_seconds")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        CycleSeconds: uint64 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type CheckmessageResponse = {
        [<JsonPropertyName("verified")>]
        Verified: bool
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("pubkey")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Pubkey: PubKey option
    }

    /// Whether we successfully negotiated a mutual close, closed without them, or discarded not-yet-opened channel
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type CloseType =
        | [<System.Runtime.Serialization.EnumMember(Value = "mutual")>] MUTUAL = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "unilateral")>] UNILATERAL = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "unopened")>] UNOPENED = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type CloseResponse = {
        // Path `Close.type`
        [<JsonPropertyName("type")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        ItemType: CloseType
        [<JsonPropertyName("tx")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Tx: string option
        [<JsonPropertyName("txid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Txid: string option
    }

    /// Whether they initiated connection or we did
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ConnectDirection =
        | [<System.Runtime.Serialization.EnumMember(Value = "in")>] IN = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "out")>] OUT = 1


    /// Type of connection (*torv2*/*torv3* only if **direction** is *out*)
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ConnectAddressType =
        | [<System.Runtime.Serialization.EnumMember(Value = "local socket")>] LOCAL_SOCKET = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "ipv4")>] IPV4 = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "ipv6")>] IPV6 = 2
        | [<System.Runtime.Serialization.EnumMember(Value = "torv2")>] TORV2 = 3
        | [<System.Runtime.Serialization.EnumMember(Value = "torv3")>] TORV3 = 4


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ConnectAddress = {
        // Path `Connect.address.type`
        [<JsonPropertyName("type")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        ItemType: ConnectAddressType
        [<JsonPropertyName("socket")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Socket: string option
        [<JsonPropertyName("address")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Address: string option
        [<JsonPropertyName("port")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Port: uint16 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ConnectResponse = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("id")>]
        Id: PubKey
        [<JsonPropertyName("features")>]
        Features: string
        // Path `Connect.direction`
        [<JsonPropertyName("direction")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Direction: ConnectDirection
    }

    /// Whether it has been paid, or can no longer be paid
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type CreateinvoiceStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "paid")>] PAID = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "expired")>] EXPIRED = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "unpaid")>] UNPAID = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type CreateinvoiceResponse = {
        [<JsonPropertyName("label")>]
        Label: string
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonPropertyName("bolt12")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt12: string option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountMsat: int64<msat> option
        // Path `CreateInvoice.status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: CreateinvoiceStatus
        [<JsonPropertyName("description")>]
        Description: string
        [<JsonPropertyName("expires_at")>]
        ExpiresAt: uint64
        [<JsonPropertyName("pay_index")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PayIndex: uint64 option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_received_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountReceivedMsat: int64<msat> option
        [<JsonPropertyName("paid_at")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaidAt: uint64 option
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_preimage")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentPreimage: Key option
        [<JsonPropertyName("local_offer_id")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        LocalOfferId: string option
        [<JsonPropertyName("payer_note")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PayerNote: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type DatastoreResponse = {
        [<JsonPropertyName("key")>]
        Key: string []
        [<JsonPropertyName("generation")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Generation: uint64 option
        [<JsonPropertyName("hex")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Hex: string option
        [<JsonPropertyName("string")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        String: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type CreateonionResponse = {
        [<JsonPropertyName("onion")>]
        Onion: string
        [<JsonPropertyName("shared_secrets")>]
        SharedSecrets: Key []
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type DeldatastoreResponse = {
        [<JsonPropertyName("key")>]
        Key: string []
        [<JsonPropertyName("generation")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Generation: uint64 option
        [<JsonPropertyName("hex")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Hex: string option
        [<JsonPropertyName("string")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        String: string option
    }

    type DelexpiredinvoiceResponse = unit

    /// State of invoice
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type DelinvoiceStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "paid")>] PAID = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "expired")>] EXPIRED = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "unpaid")>] UNPAID = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type DelinvoiceResponse = {
        [<JsonPropertyName("label")>]
        Label: string
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonPropertyName("bolt12")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt12: string option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountMsat: int64<msat> option
        [<JsonPropertyName("description")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Description: string option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        // Path `DelInvoice.status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: DelinvoiceStatus
        [<JsonPropertyName("expires_at")>]
        ExpiresAt: uint64
        [<JsonPropertyName("local_offer_id")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        LocalOfferId: string option
        [<JsonPropertyName("payer_note")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PayerNote: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type InvoiceResponse = {
        [<JsonPropertyName("bolt11")>]
        Bolt11: string
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_secret")>]
        PaymentSecret: Key
        [<JsonPropertyName("expires_at")>]
        ExpiresAt: uint64
        [<JsonPropertyName("warning_capacity")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        WarningCapacity: string option
        [<JsonPropertyName("warning_offline")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        WarningOffline: string option
        [<JsonPropertyName("warning_deadends")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        WarningDeadends: string option
        [<JsonPropertyName("warning_private_unused")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        WarningPrivateUnused: string option
        [<JsonPropertyName("warning_mpp")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        WarningMpp: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListdatastoreDatastore = {
        [<JsonPropertyName("key")>]
        Key: string []
        [<JsonPropertyName("generation")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Generation: uint64 option
        [<JsonPropertyName("hex")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Hex: string option
        [<JsonPropertyName("string")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        String: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListdatastoreResponse = {
        [<JsonPropertyName("datastore")>]
        Datastore: ListdatastoreDatastore []
    }

    /// Whether it's paid, unpaid or unpayable
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListinvoicesInvoicesStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "unpaid")>] UNPAID = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "paid")>] PAID = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "expired")>] EXPIRED = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListinvoicesInvoices = {
        [<JsonPropertyName("label")>]
        Label: string
        [<JsonPropertyName("description")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Description: string option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        // Path `ListInvoices.invoices[].status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: ListinvoicesInvoicesStatus
        [<JsonPropertyName("expires_at")>]
        ExpiresAt: uint64
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountMsat: int64<msat> option
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonPropertyName("bolt12")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt12: string option
        [<JsonPropertyName("local_offer_id")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        LocalOfferId: string option
        [<JsonPropertyName("payer_note")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PayerNote: string option
        [<JsonPropertyName("pay_index")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PayIndex: uint64 option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_received_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountReceivedMsat: int64<msat> option
        [<JsonPropertyName("paid_at")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaidAt: uint64 option
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_preimage")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentPreimage: Key option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListinvoicesResponse = {
        [<JsonPropertyName("invoices")>]
        Invoices: ListinvoicesInvoices []
    }

    /// status of the payment (could be complete if already sent previously)
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type SendonionStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "pending")>] PENDING = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "complete")>] COMPLETE = 1


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SendonionResponse = {
        [<JsonPropertyName("id")>]
        Id: uint64
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        // Path `SendOnion.status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: SendonionStatus
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountMsat: int64<msat> option
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("destination")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Destination: PubKey option
        [<JsonPropertyName("created_at")>]
        CreatedAt: uint64
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_sent_msat")>]
        AmountSentMsat: int64<msat>
        [<JsonPropertyName("label")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Label: string option
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonPropertyName("bolt12")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt12: string option
        [<JsonPropertyName("partid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Partid: uint64 option
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_preimage")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentPreimage: Key option
        [<JsonPropertyName("message")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Message: string option
    }

    /// status of the payment
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListsendpaysPaymentsStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "pending")>] PENDING = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "failed")>] FAILED = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "complete")>] COMPLETE = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListsendpaysPayments = {
        [<JsonPropertyName("id")>]
        Id: uint64
        [<JsonPropertyName("groupid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Groupid: uint64 option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        // Path `ListSendPays.payments[].status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: ListsendpaysPaymentsStatus
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountMsat: int64<msat> option
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("destination")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Destination: PubKey option
        [<JsonPropertyName("created_at")>]
        CreatedAt: uint64
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_sent_msat")>]
        AmountSentMsat: int64<msat>
        [<JsonPropertyName("label")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Label: string option
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonPropertyName("description")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Description: string option
        [<JsonPropertyName("bolt12")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt12: string option
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_preimage")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentPreimage: Key option
        [<JsonPropertyName("erroronion")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Erroronion: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListsendpaysResponse = {
        [<JsonPropertyName("payments")>]
        Payments: ListsendpaysPayments []
    }

    /// the purpose of this input (*EXPERIMENTAL_FEATURES* only)
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListtransactionsTransactionsInputsType =
        | [<System.Runtime.Serialization.EnumMember(Value = "theirs")>] THEIRS = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "deposit")>] DEPOSIT = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "withdraw")>] WITHDRAW = 2
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_funding")>] CHANNEL_FUNDING = 3
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_mutual_close")>] CHANNEL_MUTUAL_CLOSE = 4
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_unilateral_close")>] CHANNEL_UNILATERAL_CLOSE = 5
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_sweep")>] CHANNEL_SWEEP = 6
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_htlc_success")>] CHANNEL_HTLC_SUCCESS = 7
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_htlc_timeout")>] CHANNEL_HTLC_TIMEOUT = 8
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_penalty")>] CHANNEL_PENALTY = 9
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_unilateral_cheat")>] CHANNEL_UNILATERAL_CHEAT = 10


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListtransactionsTransactionsInputs = {
        [<JsonPropertyName("txid")>]
        Txid: string
        [<JsonPropertyName("index")>]
        Index: uint32
        [<JsonPropertyName("sequence")>]
        Sequence: uint32
        [<JsonPropertyName("type")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ItemType: ListtransactionsTransactionsInputsType option
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("channel")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Channel: ShortChannelId option
    }

    /// the purpose of this output (*EXPERIMENTAL_FEATURES* only)
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListtransactionsTransactionsOutputsType =
        | [<System.Runtime.Serialization.EnumMember(Value = "theirs")>] THEIRS = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "deposit")>] DEPOSIT = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "withdraw")>] WITHDRAW = 2
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_funding")>] CHANNEL_FUNDING = 3
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_mutual_close")>] CHANNEL_MUTUAL_CLOSE = 4
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_unilateral_close")>] CHANNEL_UNILATERAL_CLOSE = 5
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_sweep")>] CHANNEL_SWEEP = 6
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_htlc_success")>] CHANNEL_HTLC_SUCCESS = 7
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_htlc_timeout")>] CHANNEL_HTLC_TIMEOUT = 8
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_penalty")>] CHANNEL_PENALTY = 9
        | [<System.Runtime.Serialization.EnumMember(Value = "channel_unilateral_cheat")>] CHANNEL_UNILATERAL_CHEAT = 10


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListtransactionsTransactionsOutputs = {
        [<JsonPropertyName("index")>]
        Index: uint32
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("msat")>]
        Msat: int64<msat>
        [<JsonPropertyName("scriptPubKey")>]
        ScriptPubKey: string
        [<JsonPropertyName("type")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ItemType: ListtransactionsTransactionsOutputsType option
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("channel")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Channel: ShortChannelId option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListtransactionsTransactions = {
        [<JsonPropertyName("hash")>]
        Hash: string
        [<JsonPropertyName("rawtx")>]
        Rawtx: string
        [<JsonPropertyName("blockheight")>]
        Blockheight: uint32
        [<JsonPropertyName("txindex")>]
        Txindex: uint32
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("channel")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Channel: ShortChannelId option
        [<JsonPropertyName("locktime")>]
        Locktime: uint32
        [<JsonPropertyName("version")>]
        Version: uint32
        [<JsonPropertyName("inputs")>]
        Inputs: ListtransactionsTransactionsInputs []
        [<JsonPropertyName("outputs")>]
        Outputs: ListtransactionsTransactionsOutputs []
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListtransactionsResponse = {
        [<JsonPropertyName("transactions")>]
        Transactions: ListtransactionsTransactions []
    }

    /// status of payment
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type PayStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "complete")>] COMPLETE = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "pending")>] PENDING = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "failed")>] FAILED = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type PayResponse = {
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_preimage")>]
        PaymentPreimage: Key
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("destination")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Destination: PubKey option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        [<JsonPropertyName("created_at")>]
        CreatedAt: int64
        [<JsonPropertyName("parts")>]
        Parts: uint32
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        AmountMsat: int64<msat>
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_sent_msat")>]
        AmountSentMsat: int64<msat>
        [<JsonPropertyName("warning_partial_completion")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        WarningPartialCompletion: string option
        // Path `Pay.status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: PayStatus
    }

    /// Type of connection
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListnodesNodesAddressesType =
        | [<System.Runtime.Serialization.EnumMember(Value = "dns")>] DNS = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "ipv4")>] IPV4 = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "ipv6")>] IPV6 = 2
        | [<System.Runtime.Serialization.EnumMember(Value = "torv2")>] TORV2 = 3
        | [<System.Runtime.Serialization.EnumMember(Value = "torv3")>] TORV3 = 4
        | [<System.Runtime.Serialization.EnumMember(Value = "websocket")>] WEBSOCKET = 5


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListnodesNodesAddresses = {
        // Path `ListNodes.nodes[].addresses[].type`
        [<JsonPropertyName("type")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        ItemType: ListnodesNodesAddressesType
        [<JsonPropertyName("port")>]
        Port: uint16
        [<JsonPropertyName("address")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Address: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListnodesNodes = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("nodeid")>]
        Nodeid: PubKey
        [<JsonPropertyName("last_timestamp")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        LastTimestamp: uint32 option
        [<JsonPropertyName("alias")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Alias: string option
        [<JsonPropertyName("color")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Color: string option
        [<JsonPropertyName("features")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Features: string option
        [<JsonPropertyName("addresses")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Addresses: ListnodesNodesAddresses [] option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListnodesResponse = {
        [<JsonPropertyName("nodes")>]
        Nodes: ListnodesNodes []
    }

    /// Whether it's paid or expired
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type WaitanyinvoiceStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "paid")>] PAID = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "expired")>] EXPIRED = 1


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type WaitanyinvoiceResponse = {
        [<JsonPropertyName("label")>]
        Label: string
        [<JsonPropertyName("description")>]
        Description: string
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        // Path `WaitAnyInvoice.status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: WaitanyinvoiceStatus
        [<JsonPropertyName("expires_at")>]
        ExpiresAt: uint64
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountMsat: int64<msat> option
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonPropertyName("bolt12")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt12: string option
        [<JsonPropertyName("pay_index")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PayIndex: uint64 option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_received_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountReceivedMsat: int64<msat> option
        [<JsonPropertyName("paid_at")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaidAt: uint64 option
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_preimage")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentPreimage: Key option
    }

    /// Whether it's paid or expired
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type WaitinvoiceStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "paid")>] PAID = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "expired")>] EXPIRED = 1


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type WaitinvoiceResponse = {
        [<JsonPropertyName("label")>]
        Label: string
        [<JsonPropertyName("description")>]
        Description: string
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        // Path `WaitInvoice.status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: WaitinvoiceStatus
        [<JsonPropertyName("expires_at")>]
        ExpiresAt: uint64
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountMsat: int64<msat> option
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonPropertyName("bolt12")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt12: string option
        [<JsonPropertyName("pay_index")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PayIndex: uint64 option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_received_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountReceivedMsat: int64<msat> option
        [<JsonPropertyName("paid_at")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaidAt: uint64 option
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_preimage")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentPreimage: Key option
    }

    /// status of the payment
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type WaitsendpayStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "complete")>] COMPLETE = 0


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type WaitsendpayResponse = {
        [<JsonPropertyName("id")>]
        Id: uint64
        [<JsonPropertyName("groupid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Groupid: uint64 option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        // Path `WaitSendPay.status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: WaitsendpayStatus
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountMsat: int64<msat> option
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("destination")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Destination: PubKey option
        [<JsonPropertyName("created_at")>]
        CreatedAt: uint64
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_sent_msat")>]
        AmountSentMsat: int64<msat>
        [<JsonPropertyName("label")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Label: string option
        [<JsonPropertyName("partid")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Partid: uint64 option
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonPropertyName("bolt12")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt12: string option
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_preimage")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentPreimage: Key option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type NewaddrResponse = {
        [<JsonPropertyName("bech32")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bech32: string option
        [<JsonPropertyName("p2sh-segwit")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        P2ShSegwit: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type WithdrawResponse = {
        [<JsonPropertyName("tx")>]
        Tx: string
        [<JsonPropertyName("txid")>]
        Txid: string
        [<JsonPropertyName("psbt")>]
        Psbt: string
    }

    /// status of payment
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type KeysendStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "complete")>] COMPLETE = 0


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type KeysendResponse = {
        [<JsonConverter(typeof<KeyJsonConverter>)>]
        [<JsonPropertyName("payment_preimage")>]
        PaymentPreimage: Key
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("destination")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Destination: PubKey option
        [<JsonConverter(typeof<uint256JsonConverter>)>]
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: uint256
        [<JsonPropertyName("created_at")>]
        CreatedAt: int64
        [<JsonPropertyName("parts")>]
        Parts: uint32
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        AmountMsat: int64<msat>
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_sent_msat")>]
        AmountSentMsat: int64<msat>
        [<JsonPropertyName("warning_partial_completion")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        WarningPartialCompletion: string option
        // Path `KeySend.status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: KeysendStatus
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type FundpsbtReservations = {
        [<JsonPropertyName("txid")>]
        Txid: string
        [<JsonPropertyName("vout")>]
        Vout: uint32
        [<JsonPropertyName("was_reserved")>]
        WasReserved: bool
        [<JsonPropertyName("reserved")>]
        Reserved: bool
        [<JsonPropertyName("reserved_to_block")>]
        ReservedToBlock: uint32
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type FundpsbtResponse = {
        [<JsonPropertyName("psbt")>]
        Psbt: string
        [<JsonPropertyName("feerate_per_kw")>]
        FeeratePerKw: uint32
        [<JsonPropertyName("estimated_final_weight")>]
        EstimatedFinalWeight: uint32
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("excess_msat")>]
        ExcessMsat: int64<msat>
        [<JsonPropertyName("change_outnum")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ChangeOutnum: uint32 option
        [<JsonPropertyName("reservations")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Reservations: FundpsbtReservations [] option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SendpsbtResponse = {
        [<JsonPropertyName("tx")>]
        Tx: string
        [<JsonPropertyName("txid")>]
        Txid: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SignpsbtResponse = {
        [<JsonPropertyName("signed_psbt")>]
        SignedPsbt: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type UtxopsbtReservations = {
        [<JsonPropertyName("txid")>]
        Txid: string
        [<JsonPropertyName("vout")>]
        Vout: uint32
        [<JsonPropertyName("was_reserved")>]
        WasReserved: bool
        [<JsonPropertyName("reserved")>]
        Reserved: bool
        [<JsonPropertyName("reserved_to_block")>]
        ReservedToBlock: uint32
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type UtxopsbtResponse = {
        [<JsonPropertyName("psbt")>]
        Psbt: string
        [<JsonPropertyName("feerate_per_kw")>]
        FeeratePerKw: uint32
        [<JsonPropertyName("estimated_final_weight")>]
        EstimatedFinalWeight: uint32
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("excess_msat")>]
        ExcessMsat: int64<msat>
        [<JsonPropertyName("change_outnum")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        ChangeOutnum: uint32 option
        [<JsonPropertyName("reservations")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Reservations: UtxopsbtReservations [] option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type TxdiscardResponse = {
        [<JsonPropertyName("unsigned_tx")>]
        UnsignedTx: string
        [<JsonPropertyName("txid")>]
        Txid: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type TxprepareResponse = {
        [<JsonPropertyName("psbt")>]
        Psbt: string
        [<JsonPropertyName("unsigned_tx")>]
        UnsignedTx: string
        [<JsonPropertyName("txid")>]
        Txid: string
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type TxsendResponse = {
        [<JsonPropertyName("psbt")>]
        Psbt: string
        [<JsonPropertyName("tx")>]
        Tx: string
        [<JsonPropertyName("txid")>]
        Txid: string
    }

    type DisconnectResponse = unit

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type FeeratesPerkb = {
        [<JsonPropertyName("min_acceptable")>]
        MinAcceptable: uint32
        [<JsonPropertyName("max_acceptable")>]
        MaxAcceptable: uint32
        [<JsonPropertyName("opening")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Opening: uint32 option
        [<JsonPropertyName("mutual_close")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        MutualClose: uint32 option
        [<JsonPropertyName("unilateral_close")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        UnilateralClose: uint32 option
        [<JsonPropertyName("delayed_to_us")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        DelayedToUs: uint32 option
        [<JsonPropertyName("htlc_resolution")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        HtlcResolution: uint32 option
        [<JsonPropertyName("penalty")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Penalty: uint32 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type FeeratesPerkw = {
        [<JsonPropertyName("min_acceptable")>]
        MinAcceptable: uint32
        [<JsonPropertyName("max_acceptable")>]
        MaxAcceptable: uint32
        [<JsonPropertyName("opening")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Opening: uint32 option
        [<JsonPropertyName("mutual_close")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        MutualClose: uint32 option
        [<JsonPropertyName("unilateral_close")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        UnilateralClose: uint32 option
        [<JsonPropertyName("delayed_to_us")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        DelayedToUs: uint32 option
        [<JsonPropertyName("htlc_resolution")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        HtlcResolution: uint32 option
        [<JsonPropertyName("penalty")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Penalty: uint32 option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type FeeratesOnchain_fee_estimates = {
        [<JsonPropertyName("opening_channel_satoshis")>]
        OpeningChannelSatoshis: uint64
        [<JsonPropertyName("mutual_close_satoshis")>]
        MutualCloseSatoshis: uint64
        [<JsonPropertyName("unilateral_close_satoshis")>]
        UnilateralCloseSatoshis: uint64
        [<JsonPropertyName("htlc_timeout_satoshis")>]
        HtlcTimeoutSatoshis: uint64
        [<JsonPropertyName("htlc_success_satoshis")>]
        HtlcSuccessSatoshis: uint64
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type FeeratesResponse = {
        [<JsonPropertyName("warning_missing_feerates")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        WarningMissingFeerates: string option
    }

    /// The features understood by the destination node
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type GetrouteRouteStyle =
        | [<System.Runtime.Serialization.EnumMember(Value = "tlv")>] TLV = 0


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type GetrouteRoute = {
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("id")>]
        Id: PubKey
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("channel")>]
        Channel: ShortChannelId
        [<JsonPropertyName("direction")>]
        Direction: uint32
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        AmountMsat: int64<msat>
        [<JsonPropertyName("delay")>]
        Delay: uint32
        // Path `GetRoute.route[].style`
        [<JsonPropertyName("style")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Style: GetrouteRouteStyle
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type GetrouteResponse = {
        [<JsonPropertyName("route")>]
        Route: GetrouteRoute []
    }

    /// still ongoing, completed, failed locally, or failed after forwarding
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListforwardsForwardsStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "offered")>] OFFERED = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "settled")>] SETTLED = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "local_failed")>] LOCAL_FAILED = 2
        | [<System.Runtime.Serialization.EnumMember(Value = "failed")>] FAILED = 3


    /// Either a legacy onion format or a modern tlv format
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListforwardsForwardsStyle =
        | [<System.Runtime.Serialization.EnumMember(Value = "legacy")>] LEGACY = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "tlv")>] TLV = 1


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListforwardsForwards = {
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("in_channel")>]
        InChannel: ShortChannelId
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("in_msat")>]
        InMsat: int64<msat>
        // Path `ListForwards.forwards[].status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: ListforwardsForwardsStatus
        [<JsonPropertyName("received_time")>]
        ReceivedTime: int64
        [<JsonConverter(typeof<ShortChannelIdJsonConverter>)>]
        [<JsonPropertyName("out_channel")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        OutChannel: ShortChannelId option
        [<JsonPropertyName("payment_hash")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        PaymentHash: string option
        [<JsonPropertyName("style")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Style: ListforwardsForwardsStyle option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("fee_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        FeeMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("out_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        OutMsat: int64<msat> option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListforwardsResponse = {
        [<JsonPropertyName("forwards")>]
        Forwards: ListforwardsForwards []
    }

    /// status of the payment
    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    type ListpaysPaysStatus =
        | [<System.Runtime.Serialization.EnumMember(Value = "pending")>] PENDING = 0
        | [<System.Runtime.Serialization.EnumMember(Value = "failed")>] FAILED = 1
        | [<System.Runtime.Serialization.EnumMember(Value = "complete")>] COMPLETE = 2


    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpaysPays = {
        [<JsonPropertyName("payment_hash")>]
        PaymentHash: string
        // Path `ListPays.pays[].status`
        [<JsonPropertyName("status")>]
        [<JsonConverter(typeof<JsonStringEnumConverter>)>]
        Status: ListpaysPaysStatus
        [<JsonConverter(typeof<PubKeyJsonConverter>)>]
        [<JsonPropertyName("destination")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Destination: PubKey option
        [<JsonPropertyName("created_at")>]
        CreatedAt: uint64
        [<JsonPropertyName("label")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Label: string option
        [<JsonPropertyName("bolt11")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt11: string option
        [<JsonPropertyName("description")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Description: string option
        [<JsonPropertyName("bolt12")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Bolt12: string option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountMsat: int64<msat> option
        [<JsonConverter(typeof<MSatJsonConverter>)>]
        [<JsonPropertyName("amount_sent_msat")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        AmountSentMsat: int64<msat> option
        [<JsonPropertyName("erroronion")>]
        [<JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)>]
        Erroronion: string option
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type ListpaysResponse = {
        [<JsonPropertyName("pays")>]
        Pays: ListpaysPays []
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type PingResponse = {
        [<JsonPropertyName("totlen")>]
        Totlen: uint16
    }

    [<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
    [<CLIMutable>]
    type SignmessageResponse = {
        [<JsonPropertyName("signature")>]
        Signature: string
        [<JsonPropertyName("recid")>]
        Recid: string
        [<JsonPropertyName("zbase")>]
        Zbase: string
    }




[<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
type Request =
    | Getinfo of Requests.GetinfoRequest
    | ListPeers of Requests.ListpeersRequest
    | ListFunds of Requests.ListfundsRequest
    | SendPay of Requests.SendpayRequest
    | ListChannels of Requests.ListchannelsRequest
    | AddGossip of Requests.AddgossipRequest
    | AutoCleanInvoice of Requests.AutocleaninvoiceRequest
    | CheckMessage of Requests.CheckmessageRequest
    | Close of Requests.CloseRequest
    | ConnectPeer of Requests.ConnectRequest
    | CreateInvoice of Requests.CreateinvoiceRequest
    | Datastore of Requests.DatastoreRequest
    | CreateOnion of Requests.CreateonionRequest
    | DelDatastore of Requests.DeldatastoreRequest
    | DelExpiredInvoice of Requests.DelexpiredinvoiceRequest
    | DelInvoice of Requests.DelinvoiceRequest
    | Invoice of Requests.InvoiceRequest
    | ListDatastore of Requests.ListdatastoreRequest
    | ListInvoices of Requests.ListinvoicesRequest
    | SendOnion of Requests.SendonionRequest
    | ListSendPays of Requests.ListsendpaysRequest
    | ListTransactions of Requests.ListtransactionsRequest
    | Pay of Requests.PayRequest
    | ListNodes of Requests.ListnodesRequest
    | WaitAnyInvoice of Requests.WaitanyinvoiceRequest
    | WaitInvoice of Requests.WaitinvoiceRequest
    | WaitSendPay of Requests.WaitsendpayRequest
    | NewAddr of Requests.NewaddrRequest
    | Withdraw of Requests.WithdrawRequest
    | KeySend of Requests.KeysendRequest
    | FundPsbt of Requests.FundpsbtRequest
    | SendPsbt of Requests.SendpsbtRequest
    | SignPsbt of Requests.SignpsbtRequest
    | UtxoPsbt of Requests.UtxopsbtRequest
    | TxDiscard of Requests.TxdiscardRequest
    | TxPrepare of Requests.TxprepareRequest
    | TxSend of Requests.TxsendRequest
    | Disconnect of Requests.DisconnectRequest
    | Feerates of Requests.FeeratesRequest
    | GetRoute of Requests.GetrouteRequest
    | ListForwards of Requests.ListforwardsRequest
    | ListPays of Requests.ListpaysRequest
    | Ping of Requests.PingRequest
    | SignMessage of Requests.SignmessageRequest
        with
        member this.MethodName =
            match this with
            | Getinfo _ -> "getinfo"
            | ListPeers _ -> "listpeers"
            | ListFunds _ -> "listfunds"
            | SendPay _ -> "sendpay"
            | ListChannels _ -> "listchannels"
            | AddGossip _ -> "addgossip"
            | AutoCleanInvoice _ -> "autocleaninvoice"
            | CheckMessage _ -> "checkmessage"
            | Close _ -> "close"
            | ConnectPeer _ -> "connectpeer"
            | CreateInvoice _ -> "createinvoice"
            | Datastore _ -> "datastore"
            | CreateOnion _ -> "createonion"
            | DelDatastore _ -> "deldatastore"
            | DelExpiredInvoice _ -> "delexpiredinvoice"
            | DelInvoice _ -> "delinvoice"
            | Invoice _ -> "invoice"
            | ListDatastore _ -> "listdatastore"
            | ListInvoices _ -> "listinvoices"
            | SendOnion _ -> "sendonion"
            | ListSendPays _ -> "listsendpays"
            | ListTransactions _ -> "listtransactions"
            | Pay _ -> "pay"
            | ListNodes _ -> "listnodes"
            | WaitAnyInvoice _ -> "waitanyinvoice"
            | WaitInvoice _ -> "waitinvoice"
            | WaitSendPay _ -> "waitsendpay"
            | NewAddr _ -> "newaddr"
            | Withdraw _ -> "withdraw"
            | KeySend _ -> "keysend"
            | FundPsbt _ -> "fundpsbt"
            | SendPsbt _ -> "sendpsbt"
            | SignPsbt _ -> "signpsbt"
            | UtxoPsbt _ -> "utxopsbt"
            | TxDiscard _ -> "txdiscard"
            | TxPrepare _ -> "txprepare"
            | TxSend _ -> "txsend"
            | Disconnect _ -> "disconnect"
            | Feerates _ -> "feerates"
            | GetRoute _ -> "getroute"
            | ListForwards _ -> "listforwards"
            | ListPays _ -> "listpays"
            | Ping _ -> "ping"
            | SignMessage _ -> "signmessage"
        member this.Data =
            match this with
            | Getinfo x -> x |> box
            | ListPeers x -> x |> box
            | ListFunds x -> x |> box
            | SendPay x -> x |> box
            | ListChannels x -> x |> box
            | AddGossip x -> x |> box
            | AutoCleanInvoice x -> x |> box
            | CheckMessage x -> x |> box
            | Close x -> x |> box
            | ConnectPeer x -> x |> box
            | CreateInvoice x -> x |> box
            | Datastore x -> x |> box
            | CreateOnion x -> x |> box
            | DelDatastore x -> x |> box
            | DelExpiredInvoice x -> x |> box
            | DelInvoice x -> x |> box
            | Invoice x -> x |> box
            | ListDatastore x -> x |> box
            | ListInvoices x -> x |> box
            | SendOnion x -> x |> box
            | ListSendPays x -> x |> box
            | ListTransactions x -> x |> box
            | Pay x -> x |> box
            | ListNodes x -> x |> box
            | WaitAnyInvoice x -> x |> box
            | WaitInvoice x -> x |> box
            | WaitSendPay x -> x |> box
            | NewAddr x -> x |> box
            | Withdraw x -> x |> box
            | KeySend x -> x |> box
            | FundPsbt x -> x |> box
            | SendPsbt x -> x |> box
            | SignPsbt x -> x |> box
            | UtxoPsbt x -> x |> box
            | TxDiscard x -> x |> box
            | TxPrepare x -> x |> box
            | TxSend x -> x |> box
            | Disconnect x -> x |> box
            | Feerates x -> x |> box
            | GetRoute x -> x |> box
            | ListForwards x -> x |> box
            | ListPays x -> x |> box
            | Ping x -> x |> box
            | SignMessage x -> x |> box


[<System.CodeDom.Compiler.GeneratedCode("msggen", "")>]
type Response =
    | Getinfo of Responses.GetinfoResponse
    | ListPeers of Responses.ListpeersResponse
    | ListFunds of Responses.ListfundsResponse
    | SendPay of Responses.SendpayResponse
    | ListChannels of Responses.ListchannelsResponse
    | AddGossip of Responses.AddgossipResponse
    | AutoCleanInvoice of Responses.AutocleaninvoiceResponse
    | CheckMessage of Responses.CheckmessageResponse
    | Close of Responses.CloseResponse
    | ConnectPeer of Responses.ConnectResponse
    | CreateInvoice of Responses.CreateinvoiceResponse
    | Datastore of Responses.DatastoreResponse
    | CreateOnion of Responses.CreateonionResponse
    | DelDatastore of Responses.DeldatastoreResponse
    | DelExpiredInvoice of Responses.DelexpiredinvoiceResponse
    | DelInvoice of Responses.DelinvoiceResponse
    | Invoice of Responses.InvoiceResponse
    | ListDatastore of Responses.ListdatastoreResponse
    | ListInvoices of Responses.ListinvoicesResponse
    | SendOnion of Responses.SendonionResponse
    | ListSendPays of Responses.ListsendpaysResponse
    | ListTransactions of Responses.ListtransactionsResponse
    | Pay of Responses.PayResponse
    | ListNodes of Responses.ListnodesResponse
    | WaitAnyInvoice of Responses.WaitanyinvoiceResponse
    | WaitInvoice of Responses.WaitinvoiceResponse
    | WaitSendPay of Responses.WaitsendpayResponse
    | NewAddr of Responses.NewaddrResponse
    | Withdraw of Responses.WithdrawResponse
    | KeySend of Responses.KeysendResponse
    | FundPsbt of Responses.FundpsbtResponse
    | SendPsbt of Responses.SendpsbtResponse
    | SignPsbt of Responses.SignpsbtResponse
    | UtxoPsbt of Responses.UtxopsbtResponse
    | TxDiscard of Responses.TxdiscardResponse
    | TxPrepare of Responses.TxprepareResponse
    | TxSend of Responses.TxsendResponse
    | Disconnect of Responses.DisconnectResponse
    | Feerates of Responses.FeeratesResponse
    | GetRoute of Responses.GetrouteResponse
    | ListForwards of Responses.ListforwardsResponse
    | ListPays of Responses.ListpaysResponse
    | Ping of Responses.PingResponse
    | SignMessage of Responses.SignmessageResponse

