import sys
from textwrap import dedent, indent
from typing import TextIO
from msggen.model import Service

header = f"""/// This file was automatically generated using following command:
/// ```bash
/// {' '.join(sys.argv)}
/// ```
///
/// Do not edit this file, it'll be overwritten. Rather edit the schema that
/// This file was generated from
namespace DotNetLightning.ClnRpc.Tests

"""


class FSharpPropertyTestsGenerator:
    def __init__(self, dest: TextIO):
        self.dest = dest

    def write(self, text: str, numindent: int = 0) -> None:
        raw = dedent(text)
        if numindent > 0:
            raw = indent(text, "    " * numindent)
        self.dest.write(raw)

    def write_header(self):
        self.write(header)
        opens = """
        open Xunit
        open FsCheck
        open FsCheck.Xunit
        open DotNetLightning.ClnRpc
        open Generators
        """
        self.write(opens)
        test_class_headers = """
        type SerializationTests() =
            do
                Arb.register<PrimitiveGenerators>() |> ignore
                Arb.register<NonNullOptionGenerator>() |> ignore
                """
        self.write(test_class_headers)

    def generate_methods(self, service: Service):
        def write_test_attr():
            self.write("[<Property>]\n", numindent=1)
            self.write("[<Trait(\"PropTest\", \"PropTest\")>]\n", numindent=1)
        for method in service.methods:
            # request
            write_test_attr()
            self.write(f"member this.{method.request.typename}(v: Requests.{method.request.typename}) =\n", numindent=1)
            self.write(f"serializationTestRoundtrip<_> v\n", numindent=2)
            self.write(f"\n")

            # response
            write_test_attr()
            self.write(f"member this.{method.response.typename}(v: Responses.{method.response.typename}) =\n", numindent=1)
            self.write(f"serializationTestRoundtrip<_> v\n", numindent=2)
            self.write(f"\n")

    def generate(self, service: Service):
        self.write_header()
        self.generate_methods(service)
